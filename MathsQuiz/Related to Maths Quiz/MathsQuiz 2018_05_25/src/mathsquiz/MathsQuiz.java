/****************************************************************
   PROGRAM:   MathsQuiz
   AUTHOR:    Stuart Mackenzie
   LOGON ID:  7106103314
   DUE DATE:  

   FUNCTION:  This allows program allows the user to connect to a server and send sums
   * to the student who has enters the correct answer that sends it back to the teacher 
   * saying he or she has gotten it correct

   INPUT: The program can be run either on desktop or a hard drive.
   * the way that the user would input the data is by using a keyboard and mouse to 
   * enter and click on the interface of the application.

   OUTPUT:   the output of this application is the answer the student of the
   * sum what was given by the teacher. Then the students sends correct 
   * answer but to the Teacher. to show that the student has answer correctly 

   NOTES:
****************************************************************/


package mathsquiz;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import com.sun.glass.ui.Window;
import java.util.ArrayList;
import javax.swing.table.AbstractTableModel;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.net.*;
import java.io.*;
import java.util.*;
import org.apache.commons.lang.builder.ToStringBuilder.*;


public class MathsQuiz extends javax.swing.JFrame
{

    ArrayList<Object[]> dataValues;
    MathsQuiz.MyModel tableModel;
    DList myDLList = new DList();
    // DList my =new DList("tan","me","u","e");
    Quiz Answer = new Quiz();
    BinaryTree btMath = new BinaryTree();
    private int hash;
    private  char value[];

    /**
     * Creates new form MathsQuiz
     */
    public MathsQuiz()
    {
        SetupTable();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFirstNumber = new javax.swing.JTextField();
        txtSecondNumber = new javax.swing.JTextField();
        txtAnswer = new javax.swing.JTextField();
        btnOne = new javax.swing.JButton();
        btnsumbit = new javax.swing.JButton();
        btnTwo = new javax.swing.JButton();
        btnThree = new javax.swing.JButton();
        jTextField14 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnDisplay = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnDis = new javax.swing.JButton();
        btnPreSave = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnDis2 = new javax.swing.JButton();
        btnsave2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        btnDis3 = new javax.swing.JButton();
        btnsave3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        AnswerTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cboOperator = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtShow = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        btnConnect = new javax.swing.JButton();
        btnsend = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Enter question then click send");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("First Number");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Operator");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Second Number");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Answer");

        txtAnswer.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                txtAnswerFocusGained(evt);
            }
        });

        btnOne.setText("1");
        btnOne.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnOneActionPerformed(evt);
            }
        });

        btnsumbit.setText("Sumbit");
        btnsumbit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnsumbitActionPerformed(evt);
            }
        });

        btnTwo.setText("2");
        btnTwo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnTwoActionPerformed(evt);
            }
        });

        btnThree.setText("3");
        btnThree.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnThreeActionPerformed(evt);
            }
        });

        jLabel7.setText("Linked List (of all incorrectly answered exerisce)");

        jLabel8.setText("Binary tree (of all questions- added in the order that thet were asked).");

        btnDisplay.setText("Display");

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnExitActionPerformed(evt);
            }
        });

        btnDis.setText("Display");
        btnDis.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDisActionPerformed(evt);
            }
        });

        btnPreSave.setText("Save");
        btnPreSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnPreSaveActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Pre-Order");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("In-Order");

        btnDis2.setText("Display");
        btnDis2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDis2ActionPerformed(evt);
            }
        });

        btnsave2.setText("Save");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Post-Order");

        btnDis3.setText("Display");
        btnDis3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDis3ActionPerformed(evt);
            }
        });

        btnsave3.setText("Save");

        AnswerTable.setModel(tableModel);
        jScrollPane3.setViewportView(AnswerTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Instructor");
        jLabel1.setName(""); // NOI18N
        jLabel1.setOpaque(true);

        cboOperator.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "+", "-", "*", "/" }));

        txtShow.setColumns(20);
        txtShow.setRows(5);
        jScrollPane1.setViewportView(txtShow);

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnConnectActionPerformed(evt);
            }
        });

        btnsend.setText("send");
        btnsend.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnsendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(325, 325, 325))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jLabel10)
                        .addGap(76, 76, 76)
                        .addComponent(jLabel11)
                        .addGap(0, 372, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(94, 94, 94)
                                .addComponent(btnDisplay))
                            .addComponent(jLabel2)
                            .addComponent(jLabel6)
                            .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnsumbit, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel3))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtSecondNumber)
                                        .addComponent(txtFirstNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                        .addComponent(txtAnswer)
                                        .addComponent(cboOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnOne, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnThree, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnsend)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnConnect)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel12))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel9))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnDis)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPreSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnDis2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnsave2)
                        .addGap(18, 18, 18)
                        .addComponent(btnDis3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnsave3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFirstNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cboOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtSecondNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOne)
                    .addComponent(btnTwo)
                    .addComponent(btnThree)
                    .addComponent(btnExit)
                    .addComponent(jLabel12)
                    .addComponent(btnConnect)
                    .addComponent(btnsend))
                .addGap(28, 28, 28)
                .addComponent(btnsumbit)
                .addGap(96, 96, 96)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDisplay))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDis)
                    .addComponent(btnPreSave)
                    .addComponent(btnDis2)
                    .addComponent(btnsave2)
                    .addComponent(btnDis3)
                    .addComponent(btnsave3))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOneActionPerformed
        bubbleSort(dataValues);
        //insertionSort(dataValues);
        AnswerTable.repaint();
    }//GEN-LAST:event_btnOneActionPerformed

    private void btnTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTwoActionPerformed
        insertionSort(dataValues);
        AnswerTable.repaint();
    }//GEN-LAST:event_btnTwoActionPerformed

    private void btnThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThreeActionPerformed
        selectionSort(dataValues);
        AnswerTable.repaint();
    }//GEN-LAST:event_btnThreeActionPerformed

    private void btnsumbitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsumbitActionPerformed
        txtShow.setText(txtFirstNumber.getText());
        txtShow.setText(cboOperator.getSelectedItem().toString());
        txtShow.setText(txtSecondNumber.getText());
        txtShow.setText(txtAnswer.getText());

        dataValues.add(new Object[]
        {
            txtFirstNumber.getText(), cboOperator.getSelectedItem().toString(), txtSecondNumber.getText(), txtAnswer.getText()
        });
        tableModel.fireTableDataChanged();

        myDLList.head.append(new Node(txtFirstNumber.getText(), cboOperator.getSelectedItem().toString(), txtSecondNumber.getText(), txtAnswer.getText()));
        myDLList.print();

        int key = Integer.parseInt(txtAnswer.getText());
        String equation = txtFirstNumber.getText() + " " + cboOperator.getSelectedItem().toString() + " " + txtSecondNumber.getText() + " = " + txtAnswer.getText();
        btMath.addBTNode(key, equation);
        // btMath.inOrderTraverseTree (btMath.root,txtShow);
        //btMath.postOrderTraverseTree (btMath.root,txtShow);
    }//GEN-LAST:event_btnsumbitActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnExitActionPerformed
    {//GEN-HEADEREND:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void txtAnswerFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtAnswerFocusGained
    {//GEN-HEADEREND:event_txtAnswerFocusGained
        // TODO add your handling code here:
//         txtAnswer.addFocusListener(new FocusListener() 

//      public void focusGained(FocusEvent e) {
        if (cboOperator.getSelectedItem().equals("+"))
        {
            txtAnswer.setText("" + (Integer.parseInt(txtFirstNumber.getText()) + Integer.parseInt(txtSecondNumber.getText())));
        }

        if (cboOperator.getSelectedItem().equals("-"))
        {
            txtAnswer.setText("" + (Integer.parseInt(txtFirstNumber.getText()) - Integer.parseInt(txtSecondNumber.getText())));
        }

        if (cboOperator.getSelectedItem().equals("*"))
        {
            txtAnswer.setText("" + (Integer.parseInt(txtFirstNumber.getText()) * Integer.parseInt(txtSecondNumber.getText())));
        }

        if (cboOperator.getSelectedItem().equals("/"))
        {
            txtAnswer.setText("" + (Integer.parseInt(txtFirstNumber.getText()) / Integer.parseInt(txtSecondNumber.getText())));
        }


    }//GEN-LAST:event_txtAnswerFocusGained

    private void btnDisActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDisActionPerformed
    {//GEN-HEADEREND:event_btnDisActionPerformed
        btMath.preorderTraverseTree(btMath.root, txtShow);

    }//GEN-LAST:event_btnDisActionPerformed

    private void btnDis2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDis2ActionPerformed
    {//GEN-HEADEREND:event_btnDis2ActionPerformed
        btMath.inOrderTraverseTree(btMath.root, txtShow);
    }//GEN-LAST:event_btnDis2ActionPerformed

    private void btnDis3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDis3ActionPerformed
    {//GEN-HEADEREND:event_btnDis3ActionPerformed
        btMath.postOrderTraverseTree(btMath.root, txtShow);
    }//GEN-LAST:event_btnDis3ActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnConnectActionPerformed
    {//GEN-HEADEREND:event_btnConnectActionPerformed
        connect(serverName, serverPort);
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnsendActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnsendActionPerformed
    {//GEN-HEADEREND:event_btnsendActionPerformed
        send();
    }//GEN-LAST:event_btnsendActionPerformed

    private void btnPreSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPreSaveActionPerformed
    {//GEN-HEADEREND:event_btnPreSaveActionPerformed
        System.out.println("btnPreSaveActionPerformed");
//        String str = "Instructor" + "," + txtFirstNumber.getText().hashCode() + "," + cboOperator.getSelectedItem().toString().hashCode() + "," + txtSecondNumber.getText().hashCode() + "," + txtAnswer.getText().hashCode();
//        int hashstr = str.hashCode();
    }//GEN-LAST:event_btnPreSaveActionPerformed

        /**
         * @param args the command line arguments
         */
        public static void main(String args[])
        {
            /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
             * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
             */
            try
            {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
                {
                    if ("Nimbus".equals(info.getName()))
                    {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex)
            {
                java.util.logging.Logger.getLogger(MathsQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex)
            {
                java.util.logging.Logger.getLogger(MathsQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex)
            {
                java.util.logging.Logger.getLogger(MathsQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex)
            {
                java.util.logging.Logger.getLogger(MathsQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        //</editor-fold>

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable()
            {
                public void run()
                {
                    new MathsQuiz().setVisible(true);
                }
            });
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AnswerTable;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDis;
    private javax.swing.JButton btnDis2;
    private javax.swing.JButton btnDis3;
    private javax.swing.JButton btnDisplay;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnOne;
    private javax.swing.JButton btnPreSave;
    private javax.swing.JButton btnThree;
    private javax.swing.JButton btnTwo;
    private javax.swing.JButton btnsave2;
    private javax.swing.JButton btnsave3;
    private javax.swing.JButton btnsend;
    private javax.swing.JButton btnsumbit;
    private javax.swing.JComboBox cboOperator;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField txtAnswer;
    private javax.swing.JTextField txtFirstNumber;
    private javax.swing.JTextField txtSecondNumber;
    private javax.swing.JTextArea txtShow;
    // End of variables declaration//GEN-END:variables

 
//    public ToStringBuilder(Object object)
//    {
//        // <editor-fold defaultstate="collapsed" desc="Compiled Code">
//        /* 0: aload_0
//         * 1: aload_1
//         * 2: invokestatic  org/apache/commons/lang/builder/ToStringBuilder.getDefaultStyle:()Lorg/apache/commons/lang/builder/ToStringStyle;
//         * 5: aconst_null
//         * 6: invokespecial org/apache/commons/lang/builder/ToStringBuilder."<init>":(Ljava/lang/Object;Lorg/apache/commons/lang/builder/ToStringStyle;Ljava/lang/StringBuffer;)V
//         * 9: return
//         *  */
//        // </editor-fold>
//    }

    
    
    
 /****************************************************************
   FUNCTION:  setup table this setups up the table for interface with 
   * allows the users to see previous enter information on the interface 
   * of the application.
   * Each data value has a set of numbers in them that will display
   * the numbers in the table when the application is running.
****************************************************************/
    public void SetupTable()
    {
        String columnNames[] =
        {
            "Number1", "Operator", "Number2", "Answer"
        };

        // Create some data
        dataValues = new ArrayList();
        dataValues.add(new Object[]
        {
            "5", "+", "3", "8"
        });
        dataValues.add(new Object[]
        {
            "3", "x", "5", "15"
        });
        dataValues.add(new Object[]
        {
            "9", "-", "2", "7"
        });
        dataValues.add(new Object[]
        {
            "5", "+", "3", "8"
        });

        // constructor of JTable model
        tableModel = new MyModel(dataValues, columnNames);

        // Create a new table instance
        //table = new JTable(wordModel);
    }

  //---------------------------------------------------------------------------------------------------
    // Source: http://www.dreamincode.net/forums/topic/231112-from-basic-jtable-to-a-jtable-with-a-tablemodel/
    // class that extends the AbstractTableModel
    //---------------------------------------------------------------------------------------------------
    
/****************************************************************

   FUNCTION: this is similar to css in html as this allows to the 
   * to be nicely formatted and not all the place looking all 
   * missed
****************************************************************/
    class MyModel extends AbstractTableModel
    {

        ArrayList<Object[]> al;

        // the headers
        String[] header;

        // constructor 
        MyModel(ArrayList<Object[]> obj, String[] header)
        {
            // save the header
            this.header = header;
            // and the data
            al = obj;
        }

        // method that needs to be overload. The row count is the size of the ArrayList
        public int getRowCount()
        {
            return al.size();
        }

        // method that needs to be overload. The column count is the size of our header
        public int getColumnCount()
        {
            return header.length;
        }

        // method that needs to be overload. The object is in the arrayList at rowIndex
        public Object getValueAt(int rowIndex, int columnIndex)
        {
            return al.get(rowIndex)[columnIndex];
        }

        // a method to return the column name 
        public String getColumnName(int index)
        {
            return header[index];
        }

        // a method to add a new line to the table
        void add(String word1, String word2)
        {
            // make it an array[2] as this is the way it is stored in the ArrayList
            // (not best design but we want simplicity)
            String[] str = new String[2];
            str[0] = word1;
            str[1] = word2;
            al.add(str);
            // inform the GUI that I have change
            fireTableDataChanged();
        }
    }
/****************************************************************
   FUNCTION: the bubble sort is easy to code but hard
   * to search bubble sort is the simplest sorting 
   * algorithm that runs swapping the data if they are in the
   * wrong order
****************************************************************/
    public static void bubbleSort(ArrayList<Object[]> arr)
    {

        for (int j = 0; j < arr.size(); j++)
        {
            for (int i = j + 1; i < arr.size(); i++)
            {
                if ((arr.get(i)[0]).toString().compareToIgnoreCase(arr.get(j)[0].toString()) < 0)
                {
                    Object[] words = arr.get(j);
                    arr.set(j, arr.get(i));
                    arr.set(i, words);
                }
            }
            System.out.println(arr.get(j)[0] + " - " + arr.get(j)[1]);
        }
    }
    
 /****************************************************************

   FUNCTION: Insertion sort. a insertion sort is a simple 
   * sort that builds the final the final sorted 
   * array one item at the time this is least 
   * efficient on a large list.
****************************************************************/
    public static void insertionSort(ArrayList<Object[]> arr)
    {
        int j;
        Object[] key;
        int i;

        for (j = 1; j < arr.size(); j++)
        {
            key = arr.get(j);
            for (i = j - 1; (i >= 0) && ((arr.get(i)[0]).toString().compareToIgnoreCase(key[0].toString()) < 0); i--)
            //((arr.get(j)[0]).toString().compareToIgnoreCase(arr.get(j)[0].toString())<0)
            //for(i=j-1;(i>=0)&&(arr.get(i)<key);i--)
            {
                arr.set(i + 1, arr.get(i));
            }
            arr.set(i + 1, key);
        }
    }
    
    
/****************************************************************

   FUNCTION: a selection sort is on of the inefficient sort for 
   * large list. selection sort during each pass that ussorted 
   * element with the smallest or largest value is moved 
   * to its proper position in the array.
****************************************************************/
    public static void selectionSort(ArrayList<Object[]> arr)
    {
        int i, j, first = 0;
        Object[] temp;
        for (i = arr.size() - 1; i > 0; i--)
        {
            first = 0;
            for (j = 1; j <= i; j++)
            {
                if ((arr.get(j)[0]).toString().compareToIgnoreCase(arr.get(first)[0].toString()) < 0)
                {
                    first = j;
                }
            }
        }
        temp = arr.get(first);
        arr.set(first, arr.get(i));
        arr.set(i, temp);
    }

    //CHAT RELATED ---------------------------
    private Socket socket = null;
    private DataInputStream console = null;
    private DataOutputStream streamOut = null;
    private ChatClientThread1 client1 = null;
    private String serverName = "localhost";
    private int serverPort = 4444;
    //----------------------------------------
    
    
/****************************************************************
   FUNCTION: this is the connection code that allows the 
   * teacher or student to connect to the server. and it 
   * also allows them to send data between the
   * teacher interface and the student interface.
****************************************************************/
    public void connect(String serverName, int serverPort)
    {
        println("Establishing connection. Please wait ...");
        try
        {
            socket = new Socket(serverName, serverPort);
            println("Connected: " + socket);
            open();
        } catch (UnknownHostException uhe)
        {
            println("Host unknown: " + uhe.getMessage());
        } catch (IOException ioe)
        {
            println("Unexpected exception: " + ioe.getMessage());
        }
    }

    
/****************************************************************
   FUNCTION: This send information to the student.
****************************************************************/
    private void send()
    {
        try
        {
            String str = "Instructor" + "," + txtFirstNumber.getText() + "," + cboOperator.getSelectedItem().toString() + "," + txtSecondNumber.getText() + "," + txtAnswer.getText();
            System.out.println("str, " + str);
            streamOut.writeUTF(str);
            streamOut.flush();
            //txtWord1.setText("");
        } catch (IOException ioe)
        {
            println("Sending error: " + ioe.getMessage());
            close();
        }

    }

 /****************************************************************
   FUNCTION: This handles the information sending information 
   * from the teacher to student
   * or
   * from the student to teacher
****************************************************************/
      
    public void handle(String msg)
    {
        if (msg.equals(".bye"))
        {
            println("Good bye. Press EXIT button to exit ...");
            close();
        } else
        {
            System.out.println("Handle: " + msg);

            String[] temp = msg.split(": ");
            String[] newTemp = temp[1].split(",");

            for (int j = 0; j < temp.length; j++)
            {
                System.out.println("temp: " + j + " " + temp[j]);
            }
            for (int j = 0; j < newTemp.length; j++)
            {
                System.out.println("newTemp: " + j + " " + newTemp[j]);
            }

            if (newTemp[0].equals("Student"))
            {
                
                System.out.println("This is the answer of the student");
                //txtQuestion.setText(newTemp[1] + newTemp[2] + newTemp[3]);
                //Answer = Integer.parseInt(newTemp[4]);
                //txtAnswer.setText(newTemp[3]);
            }
            println(msg);
        }
    }
    
    
       /****************************************************************

   FUNCTION: this opens up the connection for the server 
****************************************************************/

    public void open()
    {
        try
        {
            streamOut = new DataOutputStream(socket.getOutputStream());
            client1 = new ChatClientThread1(this, socket);
        } catch (IOException ioe)
        {
            println("Error opening output stream: " + ioe);
        }
    }

    
    
/****************************************************************
   FUNCTION: closes the connection 
****************************************************************/
    public void close()
    {
        try
        {
            if (streamOut != null)
            {
                streamOut.close();
            }
            if (socket != null)
            {
                socket.close();
            }
        } catch (IOException ioe)
        {
            println("Error closing ...");
        }
        client1.close();
        //client1.stop();
    }

    void println(String msg)
    {
        System.out.println("" + msg);
        //display.appendText(msg + "\n");
        //lblMessage.setText(msg);
    }

    public void getParameters()
    {
//        serverName = getParameter("host");
//        serverPort = Integer.parseInt(getParameter("port"));

        serverName = "localhost";
        serverPort = 4444;
    }
    
//    public int hashCode() 
//    {
//        int h = hash;
//        if (h == 0 && value.length > 0) 
//        {
//            char val[] = value;
//            for (int i = 0; i < value.length; i++) 
//            {
//                h = 31 * h + val[i];
//            }
//            hash = h;
//        }
//        return h;
//    }

}
